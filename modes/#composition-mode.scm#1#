#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file is in plt scheme editor format.
   Open this file in dr-scheme version 4.2 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 11 #" Monospace\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 31 #"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 41 #"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 37 #"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 38 #"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 34 #"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 35 #"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 35 #"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 35 #"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 11 #" Monospace\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 500 0 26 3 12 #"#lang scheme"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";; This mode implements composition of machines."
0 0 4 29 1 #"\n"
0 0 17 3 64
#";; Given two typed machines, it composes them according to some "
0 0 17 3 5 #"rules"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";; generating the corresponding proof obligations that allow the "
0 0 17 3 9 #"resulting"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; machine to be meaninful."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"only-in"
0 0 4 3 1 #" "
0 0 14 3 6 #"srfi/1"
0 0 4 3 1 #" "
0 0 14 3 17 #"lset-intersection"
0 0 4 3 1 #" "
0 0 14 3 10 #"lset-union"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 12 #"\"../ast.scm\""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 19 3 1 #" "
0 0 14 3 19 #"compose-machine/pos"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 15 #"compose-machine"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"compose-machine/pos"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 14 3 4 #"null"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"compose-machine"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 14 3 4 #"null"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 66
#";                                                                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";                                                                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";                          ;           ;      ;;;                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";   ;    ;                             ;        ;                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";   ;    ;                             ;        ;                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";    ;  ;   ;;;    ; ;;  ;;;     ;;;   ;;;;     ;     ;;;    ;;;  "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";    ;  ;  ;   ;   ;;  ;   ;    ;   ;  ;; ;;    ;    ;;  ;  ;   ; "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";    ;  ;      ;   ;       ;        ;  ;   ;    ;    ;   ;  ;     "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";    ;  ;   ;;;;   ;       ;     ;;;;  ;   ;    ;    ;;;;;   ;;;  "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";     ;;   ;   ;   ;       ;    ;   ;  ;   ;    ;    ;          ; "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";     ;;   ;   ;   ;       ;    ;   ;  ;;  ;    ;    ;;  ;  ;   ; "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";     ;;    ;; ;   ;     ;;;;;   ;; ;  ;;;;      ;;   ;;;    ;;;  "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";                                                                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";                                                                 "
0 0 19 29 1 #"\n"
0 0 17 3 66
#";                                                                 "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 34 #";; v1, v2 : listof typed-variables"
0 0 19 29 1 #"\n"
0 0 17 3 59
#";; returns 2 values, a predicate to be proved and a string "
0 0 19 29 1 #"\n"
0 0 17 3 17 #";; explaining the"
0 0 17 3 1 #" "
0 0 17 3 16 #"proof obligation"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"compose-variables/pos"
0 0 19 3 1 #" "
0 0 14 3 2 #"v1"
0 0 19 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"letrec"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 14 #"find-type/list"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"vname"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 14 3 4 #"loop"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 8 #"rest-lst"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"])"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 5 #"null?"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 2 #"[("
0 0 14 3 3 #"eq?"
0 0 19 3 1 #" "
0 0 14 3 5 #"vname"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Variable-name"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"Typed-Expression-expr"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 21 #"Typed-Expression-type"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 19 3 1 #" "
0 0 14 3 8 #"rest-lst"
0 0 22 3 7 #"))])))]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 11 #"make-var-po"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 16 #"type->expression"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-type/list"
0 0 4 3 1 #" "
0 0 14 3 1 #"v"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"equal"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 16 #"type->expression"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-type/list"
0 0 4 3 1 #" "
0 0 14 3 1 #"v"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 7 #")))))])"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 6 #"po/str"
0 0 19 3 2 #" \""
0 0 19 3 1 #"!"
0 0 19 3 1 #" "
0 0 19 3 2 #"x1"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 2 #"x2"
0 0 19 3 1 #" "
0 0 19 3 1 #"."
0 0 19 3 1 #" "
0 0 19 3 1 #"("
0 0 19 3 2 #"x1"
0 0 19 3 1 #" "
0 0 19 3 1 #":"
0 0 19 3 1 #" "
0 0 19 3 2 #"v1"
0 0 19 3 1 #" "
0 0 19 3 1 #"&"
0 0 19 3 1 #" "
0 0 19 3 2 #"x2"
0 0 19 3 1 #" "
0 0 19 3 1 #":"
0 0 19 3 1 #" "
0 0 19 3 2 #"v2"
0 0 19 3 1 #" "
0 0 19 3 1 #"&"
0 0 19 3 1 #" "
0 0 19 3 2 #"x1"
0 0 19 3 1 #" "
0 0 19 3 2 #"= "
0 0 19 3 2 #"x2"
0 0 19 3 1 #")"
0 0 19 3 1 #" "
0 0 19 3 2 #"=>"
0 0 19 3 1 #" "
0 0 19 3 1 #"t"
0 0 19 3 1 #"("
0 0 19 3 2 #"x1"
0 0 19 3 1 #")"
0 0 19 3 1 #" "
0 0 19 3 2 #"=t"
0 0 19 3 1 #" "
0 0 19 3 1 #"t"
0 0 19 3 1 #"("
0 0 19 3 2 #"x2"
0 0 19 3 2 #")\""
0 0 22 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 16 #"common-vars/name"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"lset-intersection"
0 0 24 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 13 #"Variable-name"
0 0 24 3 1 #" "
0 0 14 3 21 #"Typed-Expression-expr"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 13 #"Variable-name"
0 0 24 3 1 #" "
0 0 14 3 21 #"Typed-Expression-expr"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"values"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 16 #"common-vars/name"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"btrue"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 4 #"land"
0 0 24 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 11 #"make-var-po"
0 0 4 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-var-po"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 16 #"common-vars/name"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 16 #"common-vars/name"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 6 #"po/str"
0 0 22 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 0 #""
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"compose-variables"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"lset-union"
0 0 4 3 1 #" "
0 0 14 3 16 #"variable/typed=?"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";                                                                   "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";                                                                   "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";                                        ;                          "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";   ;;;;;                                                     ;     "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;                                                       ;     "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;    ; ;;   ;   ;   ;;;    ; ;;  ;;;     ;;;   ; ;;   ;;;;;   "
 #";;;  "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;    ;;  ;  ;   ;  ;   ;   ;;  ;   ;    ;   ;  ;;  ;    ;    ;"
 #"   ; "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;    ;   ;   ; ;       ;   ;       ;        ;  ;   ;    ;    ;"
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;    ;   ;   ; ;    ;;;;   ;       ;     ;;;;  ;   ;    ;     "
 #";;;  "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;    ;   ;   ; ;   ;   ;   ;       ;    ;   ;  ;   ;    ;     "
 #"   ; "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";     ;    ;   ;    ;    ;   ;   ;       ;    ;   ;  ;   ;    ;    ;"
 #"   ; "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";   ;;;;;  ;   ;    ;     ;; ;   ;     ;;;;;   ;; ;  ;   ;    ;;;   "
 #";;;  "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";                                                                   "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";                                                                   "
 #"     "
) 0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";                                                                   "
 #" ; ; "
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"compose-invariants/pos"
0 0 4 3 1 #" "
0 0 14 3 4 #"inv1"
0 0 4 3 1 #" "
0 0 14 3 4 #"inv2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 6 #"po/str"
0 0 4 3 1 #" "
0 0 19 3 25 #"\"# v1, v2 . (&& inv1(v1 /"
0 0 19 3 31 #"\\\\ v2)) & (&& inv2(v1 /\\\\ v2))\""
0 0 22 3 2 #"])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0           0
